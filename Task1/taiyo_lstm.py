# -*- coding: utf-8 -*-
"""Taiyo_LSTM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qJkaI-zc9m0hIv_T0VG3QgZLdPTqqm-Y
"""

import pandas as pd
from datetime import datetime
import numpy as np
from sklearn.metrics import plot_confusion_matrix
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler,OneHotEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestRegressor
from numpy import loadtxt
from xgboost import XGBClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from tensorflow import keras 
from sklearn.metrics import mean_squared_error, r2_score
from keras.models import Sequential 
from keras import Input 
from sklearn.metrics import confusion_matrix
import seaborn as sns
import tensorflow as tf
from keras.utils.vis_utils import plot_model
from keras.layers import Dense, SimpleRNN
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.layers import LSTM
from sklearn.metrics import roc_curve,auc,roc_auc_score

from google.colab import drive
drive.mount('/content/drive')

data=pd.read_csv("/content/drive/MyDrive/AIProject/taiyo/Data.csv")
data

data=data.drop(['Currency','Country'],axis=1)
data.head()

data.set_index('Date',drop=True,inplace=True)

data

data['Name']=data['Name'].replace("ONGC",1)
data['Name']=data['Name'].replace("BPCL",2)
data['Name']=data['Name'].replace("HPCL",3)
data['Name']=data['Name'].replace("GAIL",4)
data['Name']=data['Name'].replace("ADAN",5)

y=data['Close']
X=data.drop('Close',axis=1)

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=42)

Mxs=MinMaxScaler()
X_train=Mxs.fit_transform(X_train)
X_test=Mxs.fit_transform(X_test)

X_train.shape[1]

model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape = (5,1)))
model.add(Dense(units=25,activation='relu',name="hidden-layer"))
model.add(LSTM(units=50))
model.add(Dense(units=25,activation='relu',name="hidden-layer-2"))
model.add(Dense(units=25,activation='relu',name="hidden-layer-3"))
model.add(Dense(1))

model.compile(loss='mean_squared_error', optimizer='adam', metrics=['mean_absolute_error'])

model.summary()

model.fit(X_train, y_train, epochs=100, verbose=1)

pred_train = model.predict(X_train)
pred_test = model.predict(X_test)

y_train=np.array(y_train)
y_test=np.array(y_test)

"""## METRICS"""

print("r2 score over TRAIN data: "+str(r2_score(y_train,pred_train)))
print("r2 score over TEST data: "+str(r2_score(y_test,pred_test)))

print("MEAN SQUARED ERROR score over TRAIN data: "+str(mean_squared_error(y_train,pred_train)))
print("MEAN SQUARED ERROR score over TEST data: "+str(mean_squared_error(y_test,pred_test)))